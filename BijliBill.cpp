//  ------------------------------
//      ELECTRICITY BILL CALCULATOR
//  ------------------------------
//  Before jumping into the code, please try it first yourself :)

#include <iostream>
using namespace std;

int main()
{
    int totalUnits;
    int totalAmtToPay = 0;

    cout << "Enter your total units of house: ";
    cin >> totalUnits;

    // ------------------------------
    // üîÅ Approach 1: Direct condition-based calculation
    // ------------------------------
    // ‚û§ We calculate the bill slab-wise based on where the total units fall.
    // ‚û§ For each slab, we add the fixed slab values and the remaining extra units.

    if (totalUnits <= 100)
    {
        totalAmtToPay += totalUnits * 4.2;
    }

    else if (totalUnits >= 101 && totalUnits <= 200)
    {
        totalAmtToPay += 100 * 4.2 + (totalUnits - 100) * 6;
    }

    else if (totalUnits >= 201 && totalUnits <= 400)
    {
        totalAmtToPay += 100 * 4.2 + 100 * 6 + (totalUnits - 200) * 8;
    }

    else if (totalUnits > 400)
    {
        totalAmtToPay += 100 * 4.2 + 100 * 6 + 200 * 8 + (totalUnits - 400) * 13;
    }

    // ------------------------------
    // üîÅ Approach 2: Reverse slab-wise breakdown
    // ------------------------------
    // ‚û§ This approach breaks down the bill in reverse ‚Äî from highest slab to lowest.
    // ‚û§ For each slab, we subtract units used in that slab and move to the next one.

    // üëá Starting again from scratch to avoid overlapping with Approach 1
    totalAmtToPay = 0; // Reset amount to test second method

    if (totalUnits > 400)
    {
        totalAmtToPay += (totalUnits - 400) * 13; // Units above 400
        totalUnits = 400; // Only 400 left for further slabs
    }

    if (totalUnits >= 201 && totalUnits <= 400)
    {
        totalAmtToPay += (totalUnits - 200) * 8; // Units between 201‚Äì400
        totalUnits = 200;
    }

    if (totalUnits >= 101 && totalUnits <= 200)
    {
        totalAmtToPay += (totalUnits - 100) * 6; // Units between 101‚Äì200
        totalUnits = 100;
    }

    if (totalUnits <= 100)
    {
        totalAmtToPay += totalUnits * 4.2; // Units from 0‚Äì100
    }

    cout << "You have to pay " << totalAmtToPay << "/- within 15 days" << endl;

    return 0;
}



/*
============================== EXPLANATION ==============================

üí° Objective:
To calculate the electricity bill amount based on total units consumed.

üßæ Slab-wise charges:
-----------------------------------------------
| Units Range           | Rate per Unit (‚Çπ)   |
|------------------------|--------------------|
| 0 - 100                | 4.20               |
| 101 - 200              | 6.00               |
| 201 - 400              | 8.00               |
| Above 400              | 13.00              |
-----------------------------------------------

==============================
üîÅ APPROACH 1: Direct Conditions
==============================
‚Üí This method checks the slab range where `totalUnits` fall.
‚Üí Based on that, it calculates bill for all previous slabs and adds the remaining units.

‚úÖ Example:
If totalUnits = 300:
- First 100 units ‚Üí 100 * 4.2
- Next 100 units ‚Üí 100 * 6
- Remaining 100 units ‚Üí 100 * 8

==============================
üîÅ APPROACH 2: Reverse Breakdown
==============================
‚Üí This method starts from the top slab (above 400) and goes down.
‚Üí For each range, it deducts slab units and moves backward.

‚úÖ Example:
If totalUnits = 750:
- Units above 400 = 350 ‚Üí 350 * 13
- 200 units ‚Üí 200 * 8
- 100 units ‚Üí 100 * 6
- 100 units ‚Üí 100 * 4.2

üß† Why Approach 2 is helpful:
- It breaks the logic into smaller chunks.
- Works well when total units are very high and avoids overlapping logic.

‚úÖ Both approaches give the same result when implemented correctly.
‚úÖ Approach 2 is generally more flexible and avoids deep nesting.

*/
